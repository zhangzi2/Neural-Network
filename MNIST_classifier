class Networks(object):
        def __init__(self, sizes):
                self.num_layers = len.(sizes)
                self.sizes = sizes
                self.biases = [np.random.randn(y,1) for y in sizes[1:]]
                self.weights = [np.random.randn(x,y) for x,y in zip(sizes[:-1],sizes[1,:]]
                
def sigmoid(z):
        return 1.0/(1.0+np.exp(-z))
        
def feedforward(self, a):
        for b,w in zip(self.biases, self.weights):
                a = sigmoid(np.dot(w,a)+b)
        return a
        
def SGD(self, training_data, epochs, batch_size, eta, test_data = None):
        if test_data: n_test = len(test_data)
        n=len(training_data)
        for j in xrange(epochs):
                random.shuffle(training_data)
                mini_batches = [training_data[k:k+batch_size] for k in xrange(0,n,batch_size)]
        for batch in mini_batches:
                self.update_mini_batch(batch, eta)
                
def update_mini_batch(mini_batch, eta):
        nabla_b = [np.zeros(b.size) for b in self.biases]
        nabla_w = [np.zeros(w.size) for w in self.weights]
        for x,y in mini_batch:
                delta_nabla_b , delta_nabla_w = self.backprop(x,y)
                nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]
                nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]
                self.biases = [b-(eta/len(mini_batch))*nb for b,nb in zip(self.biases, nabla_b]
                self.weights = [w-(eta/len(mini_batch))*nw for w,nw in zip(self.weights, nabla_w]
def backprop(self,x,y):
        nabla_b = [np.zeros(b.shape) for b in self.biases]
        nabla_w = [np.zeros(w.shape) for w in self.weights]
        activation = x
        activations = [x]
        zs=[]
        for b,w in zip(self.biases,self.weights):
                z = np.dot(w,activation)+b
                zs.append(z)
                activation = sigmoid(z)
                activations.append(activation)
        epsilon = self.cost_derivative(activations[-1],y)*\sigmoid_prime(zs[-1])
        nabla_b[-1] = epsilon
        nabla_w[-1] = np.dot(epsilon,activations[-1].transpose())
        for l in xrange(2,self.num_layers):
                z = zs[-l]
                sp = sigmoid_prime(z)
                epsilon = np.dot(self.weights[-l+1].transpose(),epsilon)*sp
                nabla_b[-l] = delta
                nabla_w[-l] = np.dot(delta,activations[-l-1].transpose())
        return (nabla_b,nabla_w)
def cost_derivative(self,output_activations,y):
        return (output_activations-y)
def sigmoid(z):
        return 1.0/(1.0+np.exp(-z))
def sigmoid_prime(z)
        return sigmoid(z)*(1-sigmoid(z))
